:sectnums:
:xrefstyle: short

= Test plan for bfloat16

This is a test plan for the APIs described in
https://github.com/intel/llvm/blob/sycl/sycl/doc/extensions/supported/sycl_ext_oneapi_bfloat16.asciidoc[sycl_ext_oneapi_bfloat16]

== Testing scope

=== Device coverage

All of the tests described below are performed only on the default device that
is selected on the CTS command line.

=== Type coverage

All of the tests described below are performed using each of the following `typename T`:

* `char`
* `short`
* `int`
* `long long`
* `std::size_t`
* `bool`
* `float`

In addition, if the device has aspect `aspect::fp64`:

* `double`

In addition, if the device has `aspect::fp16`:

* `sycl::half`

Note that `T` must be convertible to `float`

== Tests

=== Size

`bfloat16` must occupy 2 bytes of memory, check that `sizeof(bfloat16) == 2`.
This check is required to calculate dynamic range.

=== Constructors

`bfloat16()` +
`bfloat16(const bfloat16 &)` +
`~bfloat16()`

Check that:

* `std::is_default_constructible_v<bfloat16> == true`;
* `std::is_copy_constructible_v<bfloat16> == true`;
* `std::is_destructible_v<bfloat16> == true`.

`bfloat16(const float &a)` +
`bfloat16 &operator=(const float &a)`

* Create a `float` variable `f` equal to 1;
* Create a `bfloat16` variable `bf1` passing `f` to the constructor;
* Create a `bfloat16` variable `bf2` by assinging it to `f`;
* Verify that:
    ** `bf1 == f`
    ** `bf2 == f`

`bfloat16(const sycl::half &a)` +
`bfloat16 &operator=(const sycl::half &a)`

Same as above, but with `sycl::half` instead of `float`

=== Dynamic range

* Calculate the maximum and minimum positive values of `bfloat16`:
    ** Create `std::bitset` with 16 bits to store maximum value;
    ** Set all bits to 1;
    ** Set bit 15 (sign bit) and bit 7 (special values) to 0;
    ** Convert it to `bfloat16` variable `BFLT16_MAX`

    ** Create `std::bitset` with 16 bits to store minimum value;
    ** Set all bits to 0;
    ** Set bit 8 to 0 to get minimum normal value;
    ** Convert it to `bfloat16` variable `BFLT16_MIN`

* Calculate `float` dynamic range equal to `log10(FLT_MAX / FLT_MIN)` or `log10(FLT_MAX) - log10(FLT_MIN)`;
* Calculate `bfloat16` dynamic range equal to `log10(BFLT16_MIN) - log10(BFLT16_MIN)`;
* Compare integer parts of computed values.

=== Conversion

Check that:

* `std::is_convertible_v<bfloat16, float> == true`
* `std::is_convertible_v<bfloat16, sycl::half> == true`
* `std::is_convertible_v<bfloat16, bool> == true`
* `std::is_convertible_v<float, bfloat16> == true`
* `std::is_convertible_v<sycl::half, bfloat16> == true`

=== Operators

`operator-(bfloat16 &bf)`

Check that it constructs new instance of `bfloat16` class with negated value.
Create `neg_bf` using this operator and verify:

* `neg_bf == -bf`
* `bf == -neg_bf`

(Prefix) +
`bfloat16 &operator++(bfloat16 &bf)` +
`bfloat16 &operator--(bfloat16 &bf)`

* Check if it adds/substracts 1 to the value of the object referenced by this `bf`.
* Check that new value of the referenced object is equal to `(previous value +/- 1)`.
* Check if it returns the copy of `bf`.
* Check returned value type.

(Postfix) +
`bfloat16 operator++(bfloat16 &bf, int)` +
`bfloat16 operator--(bfloat16 &bf, int)`

Same as above, but check thar it returns value of `bf` before assignment instead of copy.

OP is `+=`, `-=`, `*=`, `/=` +
`bfloat16 &operatorOP(bfloat16 &lhs, const bfloat16 &rhs)`

* Check results of arithmetic operations returned to initial `bfloat16` object.
* Check returned value type.

OP is `+`, `-`, `*`, `/` +
`bfloat16 operatorOP(const bfloat16 &lhs, const bfloat16 &rhs)`

* Check results of arithmetic operations.
* Check returned value type.

OP is `==`, `!=`, `<`, `>`, `+<=+`, `>=` +
`bool operatorOP(const bfloat16 &lhs, const bfloat16 &rhs)`

* Check results of equality and inequality between two `bfloat16` objects.
* Check returned type is `bool`.

OP is `==`, `!=`, `<`, `>`, `<=`, `>=` +
`template <typename T>` +
`bool operatorOP(const bfloat16 &lhs, const T &rhs)` +
`template <typename T>` +
`bool operatorOP(const T &lhs, const bfloat16 &rhs)`

* Check results of equality and inequality between `bfloat16` and `T` objects.
* Check returned type is `bool`.
