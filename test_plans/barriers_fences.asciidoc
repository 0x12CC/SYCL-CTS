:sectnums:
:xrefstyle: short

= Test plan for barriers and fences

This is a test plan for the APIs described in https://registry.khronos.org/SYCL/specs/sycl-2020/html/sycl-2020.html#sec:barriers-fences[SYCL 2020 sections 4.15.1. Barriers and fences]

== Testing scope

=== Device coverage

All of the tests described below are performed only on the default device that
is selected on the CTS command line.

== Tests

=== SYCL2020 interface

==== Testing `sycl::atomic_fence` function

The `atomic_fence(memory_order order, memory_scope scope)` function should be checked with the following `scope` values:

* `sycl::memory_scope::sub_group` - to test synchronozation between work-items only in the same work-group
* `sycl::memory_scope::work_group` - to test synchronozation between work-items in the same work-group and in different work-groups
* `sycl::memory_scope::device` - to test synchronozation between work-items in the same work-group and in different work-groups
* `sycl::memory_scope::system` - to test synchronozation between work-items in the same work-group and in different work-groups

Test should check which `memory_scope` values are supported by the device using `info::device::atomic_fence_scope_capabilities`.

The coherence check between work-items with the `atomic_fence` function should be performed  with `sycl::handler::parallel_for`.

The check should be performed using an integer array in following memory types:

* `local memory` and `sycl::local_accessor` - to test synchronozation between work-items in the same work-group
* `global memory` and `sycl::accessor` - to test synchronozation between work-items in different work-groups

Array should be half the size of the number of tested `work-items`.

A flag variable of type `atomic_ref<bool, memory_order_relaxed, scope> sync_flag` and function `atomic_fence` should be used to cohere `work-items` with each other.

To check all the `work-items` split into two types:

* writing `work-items` - writes the `expected_val` value to `data[i]`
* reading `work-items` - checks that the value `data[i] == expected_val`

In the `write-item`, `data[i]` should be initialized with `expected_val` value. After initialization, `atomic_fence(memory_order order, memory_scope scope)` should be called with following values of `order` argument:

* `sycl::memory_order::release` - and then the value of `memory_order::acquire` should be used with reading `work-item`
* `sycl::memory_order::acq_rel` - both the same values in both `work-items`
* `sycl::memory_order::seq_cst` - both the same values in both `work-items`

Test should check which `memory_order` values are supported by the device using `info::device::atomic_fence_order_capabilities`.

Next, with writing `work-item`, the value of `sync_flag` should be set to `true`.

In the reading `work-item`, the sequence of operations is as follows:

* store `sync_flag` in a local variable until it reaches the value true
* call `atomic_fence`
* check that the `data[i]` value is set to `expected_val`